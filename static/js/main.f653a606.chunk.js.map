{"version":3,"sources":["api/api.ts","api/posts.ts","api/comments.ts","PostsContext.tsx","components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","components/CommentsList/CommentsList.tsx","components/Loader/Loader.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.ts","index.tsx"],"names":["request","url","option","fetch","then","response","ok","status","statusText","json","wait","delay","Promise","resolve","setTimeout","getUserPosts","userId","a","getPostDetails","postId","getPostComments","removePostComment","commentId","method","addPostComment","data","headers","body","JSON","stringify","post","PostsContext","createContext","posts","setPosts","selectedUserId","setSelectedUserId","selectedPostId","setSelectedPostId","showComments","setShowComments","postComments","setPostComment","postsIsLoading","setPostsIsLoading","PostsProvider","children","useState","loadPosts","useEffect","contextValues","Provider","value","PostsList","memo","useContext","handleButton","useCallback","currentPostId","className","map","type","onClick","id","NewCommentForm","userName","setUserName","userEmail","setUserEmail","userComment","setUserComment","hasNameError","setHasNameError","hasEmailError","setHasEmailError","hasCommentError","setHasCommentError","handleChange","event","target","name","resetForm","handleSubmit","preventDefault","email","onSubmit","placeholder","cn","onChange","CommentsList","deleteComment","comment","Loader","PostDetails","loadedDetails","setLoadedDetail","isLoading","setIsLoading","loadPostDetail","detail","length","App","users","setUsers","Number","user","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f653a606.chunk.js","sourcesContent":["import { Comment } from '../types/Comment';\n\nexport const BASE_URL = 'https://mate.academy/students-api';\n\n// region request\nexport const request = (url: string, option?: RequestInit) => (\n  fetch(`${BASE_URL}${url}`, option)\n    .then(response => {\n      if (!response.ok) {\n        // eslint-disable-next-line @typescript-eslint/no-throw-literal\n        throw `${response.status} - ${response.statusText}`;\n      }\n\n      return response.json();\n    })\n);\n// endregion\n\n// region post\nexport const post = (url: string, data: Omit<Comment,\n'id' | 'createdAt' | 'updatedAt'>) => (\n  request(url, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n);\n// endregion\n\n// region patch\nexport const patch = (url: string, data: RequestInit) => (\n  request(url, {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(data),\n  })\n);\n// endregion\n\n// region remove\nexport const remove = (url: string) => (\n  request(url, { method: 'DELETE' })\n);\n// endregion\n\nexport const wait = (delay: number) => {\n  return new Promise(resolve => setTimeout(resolve, delay));\n};\n","import { request, wait } from './api';\n\nexport const getUserPosts = async (userId: number) => {\n  await wait(1000);\n\n  return userId > 0\n    ? request(`/posts?userId=${userId}`)\n    : request('/posts');\n};\n\nexport const getPostDetails = async (postId: number) => {\n  await wait(1000);\n\n  return request(`/posts/${postId}`);\n};\n","import { Comment } from '../types/Comment';\n\nimport {\n  post, remove, request, wait,\n} from './api';\n\nexport const getPostComments = async (postId: number) => {\n  await wait(1000);\n\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const removePostComment = (commentId: number) => {\n  return remove(`/comments/${commentId}`);\n};\n\nexport const addPostComment = (data: Omit<Comment,\n'id' | 'createdAt' | 'updatedAt'>) => {\n  return post('/comments', data);\n};\n","import {\n  createContext, Dispatch, FC, SetStateAction, useEffect, useState,\n} from 'react';\nimport { Post } from './types/Post';\nimport { Comment } from './types/Comment';\nimport { getUserPosts } from './api/posts';\nimport { getPostComments } from './api/comments';\n\ninterface PostsContextInterface {\n  posts: Post[],\n  setPosts: Dispatch<SetStateAction<Post[]>>,\n  selectedUserId: number,\n  setSelectedUserId: Dispatch<SetStateAction<number>>,\n  selectedPostId: number,\n  setSelectedPostId: Dispatch<SetStateAction<number>>,\n  showComments: boolean,\n  setShowComments: Dispatch<SetStateAction<boolean>>,\n  postComments: Comment[],\n  setPostComment: Dispatch<SetStateAction<Comment[]>>,\n  postsIsLoading: boolean,\n  setPostsIsLoading: Dispatch<SetStateAction<boolean>>;\n}\n\nexport const PostsContext = createContext<PostsContextInterface>({\n  posts: [],\n  setPosts: () => {},\n  selectedUserId: 0,\n  setSelectedUserId: () => {},\n  selectedPostId: 0,\n  setSelectedPostId: () => {},\n  showComments: false,\n  setShowComments: () => {},\n  postComments: [],\n  setPostComment: () => {},\n  postsIsLoading: false,\n  setPostsIsLoading: () => {},\n});\n\nexport const PostsProvider: FC = ({ children }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n  const [selectedUserId, setSelectedUserId] = useState<number>(0);\n  const [selectedPostId, setSelectedPostId] = useState<number>(0);\n  const [showComments, setShowComments] = useState<boolean>(false);\n  const [postComments, setPostComment] = useState<Comment[]>([]);\n  const [postsIsLoading, setPostsIsLoading] = useState(false);\n\n  const loadPosts = async () => {\n    setPostsIsLoading(true);\n\n    const data = await getUserPosts(selectedUserId);\n\n    setPosts(data);\n\n    setPostsIsLoading(false);\n  };\n\n  useEffect(() => {\n    loadPosts();\n  }, [selectedUserId]);\n\n  useEffect(() => {\n    getPostComments(selectedPostId)\n      .then(data => setPostComment(data));\n  }, [selectedPostId]);\n\n  const contextValues = {\n    posts,\n    setPosts,\n    selectedUserId,\n    setSelectedUserId,\n    selectedPostId,\n    setSelectedPostId,\n    showComments,\n    setShowComments,\n    postComments,\n    setPostComment,\n    postsIsLoading,\n    setPostsIsLoading,\n  };\n\n  return (\n    <PostsContext.Provider value={contextValues}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n","import {\n  FC,\n  memo,\n  useCallback,\n  useContext,\n} from 'react';\nimport './PostsList.scss';\nimport { PostsContext } from '../../PostsContext';\n\nexport const PostsList: FC = memo(() => {\n  const { posts, selectedPostId, setSelectedPostId } = useContext(PostsContext);\n\n  const handleButton = useCallback((currentPostId: number) => {\n    if (currentPostId !== selectedPostId) {\n      setSelectedPostId(currentPostId);\n    } else {\n      setSelectedPostId(0);\n    }\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            className=\"PostsList__item\"\n            key={post.id}\n          >\n            <div>\n              <b>{`[User #${post.userId}]:`}</b>\n              {post.body}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                handleButton(post.id);\n              }}\n            >\n              {\n                post.id === selectedPostId\n                  ? 'Close'\n                  : 'Open'\n              }\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n});\n","import {\n  ChangeEvent,\n  FC,\n  FormEvent,\n  memo,\n  useCallback,\n  useContext,\n  useState,\n} from 'react';\nimport './NewCommentForm.scss';\nimport cn from 'classnames';\nimport { addPostComment } from '../../api/comments';\nimport { PostsContext } from '../../PostsContext';\n\nexport const NewCommentForm: FC = memo(() => {\n  const { selectedPostId } = useContext(PostsContext);\n  const [userName, setUserName] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [userComment, setUserComment] = useState('');\n  const [hasNameError, setHasNameError] = useState(false);\n  const [hasEmailError, setHasEmailError] = useState(false);\n  const [hasCommentError, setHasCommentError] = useState(false);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLInputElement\n  | HTMLTextAreaElement>) => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setUserName(value);\n        setHasNameError(false);\n        break;\n      case 'email':\n        setUserEmail(value);\n        setHasEmailError(false);\n        break;\n      case 'body':\n        setUserComment(value);\n        setHasCommentError(false);\n        break;\n      default:\n        break;\n    }\n  }, []);\n\n  const resetForm = useCallback(() => {\n    setUserName('');\n    setHasNameError(false);\n    setUserEmail('');\n    setHasEmailError(false);\n    setUserComment('');\n    setHasCommentError(false);\n  }, []);\n\n  const handleSubmit = useCallback((event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (userName && userEmail && userComment) {\n      addPostComment({\n        postId: selectedPostId,\n        name: userName,\n        email: userEmail,\n        body: userComment,\n      });\n\n      resetForm();\n    }\n\n    if (!userName) {\n      setHasNameError(true);\n    }\n\n    if (!userEmail) {\n      setHasEmailError(true);\n    }\n\n    if (!userComment) {\n      setHasCommentError(true);\n    }\n  }, [userName, userEmail, userComment, selectedPostId, addPostComment]);\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className={cn(\n            'NewCommentForm__input',\n            { 'input--error': hasNameError },\n          )}\n          value={userName}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className={cn(\n            'NewCommentForm__input',\n            { 'input--error': hasEmailError },\n          )}\n          value={userEmail}\n          onChange={handleChange}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className={cn(\n            'NewCommentForm__input',\n            { 'input--error': hasCommentError },\n          )}\n          value={userComment}\n          onChange={handleChange}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n});\n","import {\n  FC, memo, useCallback, useContext,\n} from 'react';\nimport { PostsContext } from '../../PostsContext';\nimport { removePostComment } from '../../api/comments';\n\nexport const CommentsList: FC = memo(() => {\n  const { postComments } = useContext(PostsContext);\n\n  const deleteComment = useCallback((commentId: number) => {\n    removePostComment(commentId);\n  }, []);\n\n  return (\n    <ul className=\"PostDetails__list\">\n      {postComments.map(comment => (\n        <li\n          className=\"PostDetails__list-item\"\n          key={comment.id}\n        >\n          <button\n            type=\"button\"\n            className=\"PostDetails__remove-button button\"\n            onClick={() => {\n              deleteComment(comment.id);\n            }}\n          >\n            X\n          </button>\n          <p>{comment.body}</p>\n        </li>\n      ))}\n    </ul>\n  );\n});\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import {\n  FC,\n  memo,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { PostsContext } from '../../PostsContext';\nimport { CommentsList } from '../CommentsList';\nimport { Loader } from '../Loader';\nimport { Post } from '../../types/Post';\nimport { getPostDetails } from '../../api/posts';\n\nexport const PostDetails: FC = memo(() => {\n  const {\n    showComments, setShowComments, postComments, selectedPostId,\n  } = useContext(PostsContext);\n  const [loadedDetails, setLoadedDetail] = useState<Post | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const loadPostDetail = useCallback(async () => {\n    setIsLoading(true);\n    const detail = await getPostDetails(selectedPostId) || null;\n\n    setLoadedDetail(detail);\n    setIsLoading(false);\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    loadPostDetail();\n  }, [selectedPostId]);\n\n  if (isLoading) {\n    return <Loader />;\n  }\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{loadedDetails?.body}</p>\n      </section>\n\n      {\n        !!postComments.length && (\n          <section className=\"PostDetails__comments\">\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setShowComments(!showComments);\n              }}\n            >\n              {`${\n                !showComments\n                  ? 'Show'\n                  : 'Hide'\n              } ${postComments.length} comments`}\n            </button>\n\n            {showComments && <CommentsList />}\n          </section>\n        )\n      }\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm />\n        </div>\n      </section>\n    </div>\n  );\n});\n","/* eslint-disable no-nested-ternary */\n\nimport {\n  ChangeEvent,\n  FC,\n  useCallback,\n  useContext,\n  useEffect,\n  useState,\n} from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { PostsContext } from './PostsContext';\nimport { getUsers } from './api/users';\nimport { User } from './types/User';\nimport { Loader } from './components/Loader';\n\nexport const App: FC = () => {\n  const {\n    posts,\n    selectedUserId,\n    setSelectedUserId,\n    selectedPostId,\n    setSelectedPostId,\n    postsIsLoading,\n  } = useContext(PostsContext);\n  const [users, setUsers] = useState<User[]>([]);\n\n  useEffect(() => {\n    getUsers()\n      .then(data => setUsers(data));\n  }, []);\n\n  const handleChange = useCallback((event: ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectedUserId(Number(value));\n    setSelectedPostId(0);\n  }, [setSelectedUserId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            id=\"user-selector\"\n            name=\"user-selector\"\n            value={selectedUserId}\n            onChange={handleChange}\n          >\n            <option value=\"0\">All users</option>\n            {users.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          {\n            postsIsLoading\n              ? <Loader />\n              : posts.length\n                ? <PostsList />\n                : 'No posts found'\n          }\n        </div>\n\n        <div className=\"App__content\">\n          {!!selectedPostId && <PostDetails />}\n        </div>\n      </main>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getUsers = () => {\n  return request('/users');\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { PostsProvider } from './PostsContext';\n\nconst Root = () => (\n  <PostsProvider>\n    <App />\n  </PostsProvider>\n);\n\nReactDOM.render(\n  <Root />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}